name: Validate to UAT on PR Merge

on:
  pull_request:
    types: [opened, edited, synchronize, reopened]
    branches:
      - 'uat'

jobs:
    Validate-Deploy-to-UAT:
      if: startsWith(github.head_ref, 'STRY')
      runs-on:  ubuntu-latest
      steps:

        # Installing below:
          # sf cli
          # sfdx-git-delta plugin - sf cli plugin
        - name: Install Dependencies
          run: |
            chmod +x ./.github/build/install_dependencies.sh
            ./.github/build/install_dependencies.sh

        # Checkout the code in the pull request
        - name: Checkout
          uses: actions/checkout@v4
          with:
            fetch-depth: 0

        # Authenticate to target org
        - name: "Authenticate to Org"
          run: |
            echo "${{ secrets.JWT_PRIVATE_KEY }}" > server.key
            sf org login jwt -i ${{ secrets.SF_CLIENT_ID }} -o ${{ secrets.SF_USERNAME }} -f server.key -a defaultUser -s 

        # Authenticate with logged in user to target org
        - name: 'Fetch user'
          run: |
           sf data query --query "SELECT username FROM User Where vcs_username__c = '${{github.event.pull_request.user.login}}'" -r json > data.json

           TOTALSIZE=$(jq -r '.result.totalSize' data.json)

           echo "TOTALSIZE --> $TOTALSIZE"

            if [ "$TOTALSIZE" -eq 1 ]; then
              USERNAME=$(jq -r '.result.records[0].Username' data.json)
              echo y | sf org logout
              sf org login jwt -i ${{ secrets.SF_CLIENT_ID }} -o $USERNAME -f server.key -a defaultUser -s
            else
              echo "Request to fetch username not found"
            fi

        #Get Modified Metadata. If there is a merge conflict, get the modified components from the actual branch and deploy contents of the current branch
        - name: "Get Modified Metadata"
          run: |
            if [[ "${{ github.head_ref }}" =~ _MC_FC$ ]]; then
              CURRENTBRANCH=${{ github.head_ref }}
              MODIFIEDBRANCH="${CURRENTBRANCH%_MC_FC}"
              echo "Merge conflict detected, using the base branch $MODIFIEDBRANCH to generate package file"
              git checkout $MODIFIEDBRANCH
            else
              echo "No Merge conflict, proceeding with the ${{ github.head_ref }} branch for package file generation"
              git checkout '${{ github.head_ref }}'
            fi
            
            mkdir mdList
            sf sgd source delta -f "origin/main" -o mdList/ -i .forceignore
            echo "--- package.xml generated with added and modified metadata ---"
            cat mdList/package/package.xml
            echo -e "\n--- Delta Check-Only Deploy ---"
            git checkout -
            
        #Get Test Classes betweeb the strings 'TestClasses::' & '::TestClasses' in PR
        - name: "Test Class Check"
          id: "CHECK_TESTS"
          run: |
            grep -qE "<name>ApexClass</name>|<name>ApexTrigger</name>" mdList/package/package.xml && RUN_TESTS=true || RUN_TESTS=false
            echo "RUN_TESTS=$RUN_TESTS" >> $GITHUB_OUTPUT
            if [ "$RUN_TESTS" = false ]; then
              echo "No Apex Classes/Triggers found, skipping Get Test Classes Step."
            fi
        
        - name: "Get Test Classes"
          id: "Get_TESTS"
          if: ${{ steps.CHECK_TESTS.outputs.RUN_TESTS == 'true' }}
          run: |
              echo "Begin XML Parser Installation"
              sudo apt-get update -qq > /dev/null 2>&1
              sudo DEBIAN_FRONTEND=noninteractive apt-get install -qq xmlstarlet &>/dev/null
              echo "XML Parser Installed"
              echo "${{ github.event.pull_request.body }}" > pr_body.txt
              chmod +x ./.github/build/get_test_classes.sh
              ./.github/build/get_test_classes.sh mdList/package/package.xml pr_body.txt
          
          # Check-only deploy - Check fi the branch ends with _MC_FC. If yes, only get the base branch's components changed
        - name: "Validate Changes"
          env:
            RUN_TESTS: ${{ steps.CHECK_TESTS.outputs.RUN_TESTS }}
            TEST_CLASSES: ${{ steps.GET_TESTS.outputs.TEST_CLASSES }}        
          run: |
            if [ $RUN_TESTS = false ]; then
              sf project deploy start -x mdList/package/package.xml -w 30 --dry-run
            else
              sf project deploy start -x mdList/package/package.xml -w 30 --dry-run -l RunSpecifiedTests -t $TEST_CLASSES
            fi
